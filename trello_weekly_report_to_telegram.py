# trello_weekly_report_to_telegram.py
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ. –ë–µ—Ä—ë—Ç –∏–∑ Trello –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á–µ–∫-–ø—É–Ω–∫—Ç—ã –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é –∏ —à–ª—ë—Ç –æ—Ç—á—ë—Ç –≤ Telegram.
# –ß–∏—Ç–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–º. GitHub Actions Secrets).

import os
import requests
import datetime
import pytz
import textwrap
from collections import defaultdict

# === –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
def need(name: str) -> str:
    v = os.getenv(name)
    if not v:
        raise RuntimeError(f"ENV {name} is required")
    return v

TRELLO_KEY   = need("TRELLO_KEY")
TRELLO_TOKEN = need("TRELLO_TOKEN")
BOARD_ID     = need("BOARD_ID")          # –ù–∞–ø—Ä–∏–º–µ—Ä: 4CCbpXkF (shortLink –∏–∑ URL –±–æ—Ä–¥–∞)
TG_TOKEN     = need("TG_TOKEN")
TG_CHAT_ID   = need("TG_CHAT_ID")        # –ß–∏—Å–ª–æ–≤–æ–π chat_id
TZ_NAME      = os.getenv("TZ_NAME", "Europe/Moscow")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞

# === –î–∞—Ç—ã –ø—Ä–æ—à–µ–¥—à–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ ===
tz = pytz.timezone(TZ_NAME)
now = datetime.datetime.now(tz)
monday_this_week = (now - datetime.timedelta(days=now.weekday())).replace(hour=0, minute=0, second=0, microsecond=0)
start = monday_this_week - datetime.timedelta(days=7)
end   = monday_this_week  # –Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

def to_utc_iso(dt: datetime.datetime) -> str:
    return dt.astimezone(pytz.UTC).isoformat()

SINCE  = to_utc_iso(start)
BEFORE = to_utc_iso(end)

def fmt_local(iso_str: str) -> str:
    try:
        dt = datetime.datetime.fromisoformat(iso_str.replace("Z","+00:00")).astimezone(tz)
        return dt.strftime("%Y-%m-%d %H:%M")
    except Exception:
        return iso_str

def get_actions():
    url = f"https://api.trello.com/1/boards/{BOARD_ID}/actions"
    params = {
        "key": TRELLO_KEY,
        "token": TRELLO_TOKEN,
        "filter": "updateCheckItemStateOnCard",
        "limit": 1000,
        "since": SINCE,
        "before": BEFORE
    }
    r = requests.get(url, params=params, timeout=30)
    r.raise_for_status()
    return r.json()

def build_report(actions):
    # cardId -> list[(date, itemName)]
    by_card = defaultdict(list)
    card_meta = {}  # cardId -> (name, url)
    for a in actions:
        if not isinstance(a, dict):
            continue
        data = a.get("data", {})
        ci = data.get("checkItem", {})
        if ci.get("state") != "complete":
            continue
        item_name = ci.get("name", "")
        card      = data.get("card", {}) or {}
        card_id   = card.get("id")
        card_name = card.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        short     = card.get("shortLink", "")
        card_url  = f"https://trello.com/c/{short}" if short else ""
        by_card[card_id].append((a.get("date"), item_name))
        card_meta[card_id] = (card_name, card_url)

    title = f"–û—Ç—á—ë—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —á–µ–∫-–ø—É–Ω–∫—Ç–∞–º: {start.strftime('%Y-%m-%d')} ‚Äî {(end - datetime.timedelta(days=1)).strftime('%Y-%m-%d')}"
    if not by_card:
        return title, "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # –°–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    lines = []
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∏–º–µ–Ω–∏
    for card_id in sorted(by_card.keys(), key=lambda cid: (card_meta[cid][0] or "").lower()):
        card_name, card_url = card_meta[card_id]
        lines.append(f'üîπ <a href="{card_url}">{card_name}</a>')
        for dt_iso, item in sorted(by_card[card_id], key=lambda x: x[0] or ""):
            lines.append(f"‚ÄÉ‚Äî {fmt_local(dt_iso)} ‚Äî {item}")
        lines.append("")  # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    body = "\n".join(lines).strip()
    return title, body

def tg_send_html(token: str, chat_id: str, text: str):
    # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ~4096 —Å–∏–º–≤–æ–ª–æ–≤; —Ä–µ–∂–µ–º –Ω–∞ –±–ª–æ–∫–∏
    for chunk in textwrap.wrap(text, width=3500, replace_whitespace=False, drop_whitespace=False):
        resp = requests.post(
            f"https://api.telegram.org/bot{token}/sendMessage",
            data={"chat_id": chat_id, "text": chunk, "parse_mode": "HTML", "disable_web_page_preview": True},
            timeout=30
        )
        resp.raise_for_status()

def main():
    # sanity: –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (/start), –∏–Ω–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–π–¥—É—Ç
    actions = get_actions()
    title, body = build_report(actions)
    tg_send_html(TG_TOKEN, TG_CHAT_ID, f"<b>{title}</b>")
    tg_send_html(TG_TOKEN, TG_CHAT_ID, body)
    print("OK")

if __name__ == "__main__":
    main()
